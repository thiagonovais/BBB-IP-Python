#!/usr/bin/python

import time
import math
import Adafruit_BBIO.GPIO as GPIO
import Adafruit_BBIO.PWM as PWM
import ConstantsFile

Pconst = ConstantsFile.Constants()

# Start the GPIO's

#PWM.start(channel, duty, freq, polarity)
PWM.start(Pconst.PWM_R_PWM, 0, Pconst.PWM_Freq) #pwm starts disabled
PWM.start(Pconst.PWM_L_PWM, 0, Pconst.PWM_Freq) #pwm starts disabled
GPIO.setup(Pconst.L_pos, GPIO.OUT)
GPIO.setup(Pconst.L_neg, GPIO.OUT)
GPIO.setup(Pconst.R_pos, GPIO.OUT)
GPIO.setup(PConst.R_neg, GPIO.OUT)

class PWMClass ():
	
	def PWMStart(self):
    	    # Starting the communication with the PWM controller
            #GPIO.output(Pconst.RedLED, GPIO.HIGH)
            time.sleep(3)						# Wait to stabilize the communication
	    
	def PWM_Signals(self, rightMotor, leftMotor):

	    # Sending the values to the PWM controller that is connected to the motors
	    percentageR=math.fabs(rightMotor)
	    percentageL=math.fabs(leftMotor)
	    
	    if rightMotor>0:
		#PWM.set_duty_cycle(Pconst.PWM_R_DIR, 100)
		GPIO.output(Pconst.R_pos, GPIO.HIGH)
		GPIO.output(Pconst.R_neg, GPIO.LOW)
		PWM.set_duty_cycle(Pconst.PWM_R_PWM, percentageR)
	    elif rightMotor<0:
		#PWM.set_duty_cycle(Pconst.PWM_R_DIR,  0)
		GPIO.output(Pconst.R_pos, GPIO.LOW)
		GPIO.output(Pconst.R_neg, GPIO.HIGH)
		PWM.set_duty_cycle(Pconst.PWM_R_PWM,  percentageR)
	    elif rightMotor==0:
		PWM.set_duty_cycle(Pconst.PWM_R_PWM, 0)
		GPIO.output(Pconst.R_pos, GPIO.LOW)
		GPIO.output(Pconst.R_neg, GPIO.LOW)
    	    if leftMotor>0:
	        #PWM.set_duty_cycle(Pconst.PWM_L_DIR, 0)
		GPIO.output(Pconst.L_pos, GPIO.HIGH)
		GPIO.output(Pconst.L_neg, GPIO.LOW)
	        PWM.set_duty_cycle(Pconst.PWM_L_PWM, percentageL)
	    elif leftMotor<0:
	    	#PWM.set_duty_cycle(Pconst.PWM_L_DIR, 100)
		GPIO.output(Pconst.L_pos, GPIO.LOW)
		GPIO.output(Pconst.L_neg, GPIO.HIGH)
      	    	PWM.set_duty_cycle(Pconst.PWM_L_PWM, percentageL)
    	    elif leftMotor==0:
	   	PWM.set_duty_cycle(Pconst.PWM_L_PWM, 0)
		GPIO.output(Pconst.L_pos, GPIO.LOW)
		GPIO.output(Pconst.L_neg, GPIO.LOW)

			
	def PWMStop(self):
	    	PWM.stop(Pconst.PWM_R_PWM)
		#PWM.stop(Pconst.PWM_R_DIR)
		GPIO.output(Pconst.R_pos, GPIO.LOW)
		GPIO.output(Pconst.R_neg, GPIO.LOW)		
		PWM.stop(Pconst.PWM_L_PWM)
		#PWM.stop(Pconst.PWM_L_DIR)		
		GPIO.output(Pconst.L_pos, GPIO.LOW)
		GPIO.output(Pconst.L_neg, GPIO.LOW)
		PWM.cleanup()
		
		
